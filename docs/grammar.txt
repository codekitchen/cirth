
#expected, integer, string, float, variable

<program> ::= <explist>

<explist> ::= <exp> [; [<explist>]]

<exp> ::= <assignment>
       |  <list>
       |  <application>

<list> ::= <application>, [<list>]

<application> ::= <term>+

<term> ::= <value>
        |  <list-expansion>

<value> ::= (<explist>)
         |  <function>
         |  <variable>
         |  <integer>
         |  <string>
         |  <float>
         |  <map>
         |  <value><indicator>    # call
         |  <value>.<variable>    # lookup
         |  <value>\[<explist>\]  # index

<indicator> ::= . | ?

<assignment> ::= <reassignment> | <definition>

<reassignment> ::= <assignee> = <exp>

<definition> ::= <assignee> := <exp>

<assignee> ::= <variable> [, [<assignee>]]
            |  <value>.<variable> [, [<assignee>]]
            |  <value>\[<explist>\] [, [<assignee>]]

<function> ::= {<explist>}
            |  {|<arglist>| <explist>}

<arglist> ::= [<leftvars>;] <rightvars>

<leftvars> ::= [[<variable>(<explist>)] <variable>*,] <variable>*
            | <variable>(<explist>) <variable>*

<rightvars> ::= <variable>* [,<variable>* [<variable>(<explist>)]]
             |  <variable>* <variable>(<explist>)

<list-expansion> ::= *(<explist>)

<map> ::= \[[<map-definition>]\]

<map-definition> ::= <application>: <application> [, [<map-definition>]]

  `-=[]\;',./~!@#$%^&*()_+{}|:"<>?

# variables are alphanumeric and can contain any characters but ,.{}()[]#;'"\:?
