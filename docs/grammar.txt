
#expected, integer, string, float, variable

<program> ::= [<explist>]

<explist> ::= <exp> [; [<explist>]]

<exp> ::= <assignment>
       |  <list>
       |  <mutation>
       |  <definition>
        
<list> ::= <application>, [<list>]

<application> ::= <term>+

<term> ::= <fullvalue>
        |  <list-expansion>

<fullvalue> ::= <header>*<value><trailer>*

<value> ::= (<explist>)
         |  <function>
         |  <variable>
         |  <integer>
         |  <string>
         |  <float>
         |  <map>

<header> ::= <left-indicator>     # open call

<trailer> ::= <right-indicator>   # open call
           |  .<variable>         # lookup
           |  \[<explist>\]       # index
           |  ((<application> ,)* [<application>]) # closed call

<left-indicator> ::= @

<right-indicator> ::= ' | ?

<mutation> ::= <assignee> := <exp>

<definition> ::= <assignee> = <exp>

<assignee> ::= <variable> [, [<assignee>]]
            |  <fullvalue>.<variable> [, [<assignee>]]
            |  <fullvalue>\[<explist>\] [, [<assignee>]]

<function> ::= {<program>}
            |  {|<arglist>| <program>}

<arglist> ::= [<leftvars>;] <rightvars>

<leftvars> ::= [[<variable>(<explist>)] <variable>*,] <variable>*
            | <variable>(<explist>) <variable>*

<rightvars> ::= <variable>* [,<variable>* [<variable>(<explist>)]]
             |  <variable>* <variable>(<explist>)

<list-expansion> ::= \*(<explist>)

<map> ::= \[[<map-definition>]\]

<map-definition> ::= <application>: <application> [, [<map-definition>]]

  `-=[]\;',./~!@#$%^&*()_+{}|:"<>?

# variables are alphanumeric and can contain any characters but ,.{}()[]#;'"\:?
